library ieee;
   use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;
	
	
entity dc_disp_ctrl is
port(
	clk : in std_logic;
	reset_n : in std_logic;

	pwm_dc : in integer range 0 to 100;
	pwm_dc_updated : in std_logic;
	
	hex0 : out std_logic_vector(6 downto 0);
	hex1 : out std_logic_vector(6 downto 0);
	hex2 : out std_logic_vector(6 downto 0);
	
	tx_ready : in std_logic;
	tx_data : out std_logic_vector(7 downto 0);
	tx_valid : out std_logic
);
end entity dc_disp_ctrl;


architecture rtl of dc_disp_ctrl is

type t_ascii_check is array (10 downto 0) of std_logic_vector(6 downto 0);

constant ascii_table : t_ascii_check := (
													 "1000000",  -- 0
													 "1111001",  -- 1
													 "0100100",  -- 2
													 "0110000",  -- 3
													 "0011001",  -- 4
													 "0010010",  -- 5
													 "0000010",  -- 6
													 "1111000",  -- 7
													 "0000000",  -- 8
													 "1000000",   -- 9
													 "1111111" -- off
													 );
													 					 
													 
													 

   function fn_create_bcd(
		input : integer range 0 to 100)
   return unsigned is
      variable v_ones      : integer range 0 to 10;
      variable v_tens      : integer range 0 to 10;
      variable v_hundreds  : integer range 0 to 1;
		variable input_temp : integer range 0 to 100;
   begin
      v_ones         := 0;
      v_tens         := 0;
      v_hundreds     := 0;
		input_temp := input;
		for i in 0 to (25) loop
         if (input_temp > 99) then
				input_temp := input_temp - 100;
				v_hundreds := v_hundreds +1;
			
         elsif (input_temp > 9) then
				v_tens := v_tens +1;
				input_temp := input_temp - 10;
			
         elsif(input_temp > 0) then
				v_tens := v_tens +1;
				input_temp := input_temp - 1;
         end if;
      end loop;
		
		
      return to_unsigned(v_hundreds, 2) & to_unsigned(v_tens, 4) & to_unsigned(v_ones, 4);

   end function fn_create_bcd;
	
	
	
	function fn_unsigned_to_7seg(
		input : unsigned(3 downto 0))
   return std_logic_vector is
			variable input_integer : integer range 0 to 15;
   begin
      input_integer := to_integer(input);
		return ascii_table(input_integer);
   end function fn_unsigned_to_7seg;
	
	signal s_updateInfo : std_logic := '0';
	signal s_bcd_result : unsigned(9 downto 0);
	signal s_dc : integer range 0 to 100 := 0;
begin

	

	process(clk)
	begin
	
		if(rising_edge(clk))then
			if((pwm_dc_updated) = '1') then
				s_bcd_result <= fn_create_bcd(pwm_dc);
			
				hex0 <= fn_unsigned_to_7seg(s_bcd_result(3 downto 0));
				hex1 <= fn_unsigned_to_7seg(s_bcd_result(7 downto 4));
				hex2 <= fn_unsigned_to_7seg("00" & s_bcd_result(9 downto 8));
				s_updateInfo <= '1';
				s_dc <= pwm_dc;
			elsif(s_updateInfo = '1')then
				if(tx_ready = '1')then
					tx_valid <= '1';
					tx_data <= std_logic_vector(to_unsigned(s_dc, 8));
					s_updateInfo <= '0';
				end if;
			else
				tx_valid <= '0';
			end if;
		
		
		end if;
	
	
	
	
	
	
	end process;






















end architecture rtl;